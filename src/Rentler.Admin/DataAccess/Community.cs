//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rentler.Admin.DataAccess
{
    using Rentler.Admin.Common;
    using Rentler.Admin.Common.Listing;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class Community
    {
        public Community()
        {
            this.CommunityAmenities = new HashSet<CommunityAmenity>();
            this.OperatingDays = new HashSet<OperatingDay>();
            this.FeaturedCommunities = new HashSet<FeaturedCommunity>();
            this.CommunityPhotos = new HashSet<CommunityPhoto>();
            this.Buildings = new HashSet<Building>();
        }
    
        public long CommunityId { get; set; }
        public int UserId { get; set; }
        public string Nickname { get; set; }
        public int ManagementTypeCode { get; set; }
        public string Address1 { get; set; }
        public string Address2 { get; set; }
        public string City { get; set; }
        public string State { get; set; }
        public string Zip { get; set; }
        public string DefaultCity { get; set; }
        public float Latitude { get; set; }
        public float Longitude { get; set; }
        public Nullable<int> TotalUnits { get; set; }
        public bool IsUpgraded { get; set; }
        public string RequestedPackage { get; set; }
        public Nullable<int> AdvertisedListingCount { get; set; }
        public Nullable<int> FeaturedPlacementCount { get; set; }
        public Nullable<int> RefreshDays { get; set; }
        public bool IsUnderReview { get; set; }
        public string InvoiceContactName { get; set; }
        public string InvoiceContactPhone { get; set; }
        public string StreetHash { get; set; }
        public string FullHash { get; set; }
        public Nullable<System.Guid> MainPhotoId { get; set; }
        public string MainPhotoExtension { get; set; }
        public Nullable<System.Guid> HeaderPhotoId { get; set; }
        public string HeaderPhotoExtension { get; set; }
        public System.DateTime CreateDateUtc { get; set; }
        public string CreatedBy { get; set; }
        public Nullable<System.DateTime> UpdateDateUtc { get; set; }
        public string UpdatedBy { get; set; }
        public Nullable<int> ContactInfoId { get; set; }
        public string Description { get; set; }
        public bool IsSeniorRestricted { get; set; }
        public string InternalName { get; set; }
        public Nullable<bool> HasOperatingHours { get; set; }
        public Nullable<bool> UseCustomPhoneNumbers { get; set; }
        public Nullable<System.DateTime> LastRefreshDateUtc { get; set; }
        public string WebsiteUrl { get; set; }
        public bool IsDeleted { get; set; }
        public string Directions { get; set; }
        public string CustomPhoneId { get; set; }
        public string CustomPhoneNumber { get; set; }
        public bool RecordCalls { get; set; }
        public Nullable<long> PropertyId { get; set; }

        public CommunityDetails ToCommunityDetails()
        {
            var community = new CommunityDetails()
            {
                Address = new Address
                {
                    Address1 = this.Address1,
                    Address2 = this.Address2,
                    City = this.City,
                    State = this.State,
                    Zip = this.Zip,
                    Latitude = this.Latitude,
                    Longitude = this.Longitude
                },
                AdvertisedListingCount = this.AdvertisedListingCount,
                CommunityId = this.CommunityId,
                FullHash = this.FullHash,
                HeaderPhotoExtension = this.HeaderPhotoExtension,
                HeaderPhotoId = this.HeaderPhotoId,
                IsUpgraded = this.IsUpgraded,
                MainPhotoExtension = this.MainPhotoExtension,
                MainPhotoId = this.MainPhotoId,
                ManagementTypeCode = this.ManagementTypeCode,
                Nickname = this.Nickname,
                RefreshDays = this.RefreshDays,
                StreetHash = this.StreetHash,
                TotalUnits = this.TotalUnits,
                UseCustomPhoneNumbers = this.UseCustomPhoneNumbers,
                UserId = UserId,
                FeaturedPlacementCount = this.FeaturedPlacementCount,
                InvoiceContactName = this.InvoiceContactName,
                InvoiceContactPhone = this.InvoiceContactPhone,
                RequestedPackage = this.RequestedPackage,
                IsUnderReview = this.IsUnderReview,
                CreateDateUtc = this.CreateDateUtc,
                InternalName = this.InternalName,
                User = this.User != null ? this.User.ToUser() : null,
                IsDeleted = this.IsDeleted,
                FeaturedCommunities = this.FeaturedCommunities.Select(x => x.ToFeaturedCommunity()).ToList(),
                Contact = this.ContactInfo != null ? this.ContactInfo.ToContact() : null,
                WebsiteUrl = this.WebsiteUrl,
                OperatingHours = ToOperatingHours(),
                HasOperatingHours = this.HasOperatingHours,
                Description = this.Description,
                IsSeniorRestricted = this.IsSeniorRestricted,
                CustomPhoneId = this.CustomPhoneId,
                CustomPhoneNumber = this.CustomPhoneNumber
            };

            if (this.CommunityAmenities != null)
                community.Amenities = this.CommunityAmenities.Select(a => a.AmenityId).ToArray();

            return community;
        }
         public List<Common.BusinessDay> ToOperatingHours()
        {
            List<Common.BusinessDay> operatingHours = new List<Common.BusinessDay>();

            foreach (DayOfWeek d in Enum.GetValues(typeof(DayOfWeek)))
                operatingHours.Add(Common.BusinessDay.Default(d));

            // make monday first
            Common.BusinessDay first = operatingHours.First();
            operatingHours.RemoveAt(0);
            operatingHours.Add(first);

            if (!this.HasOperatingHours.HasValue || !this.HasOperatingHours.Value)
                return operatingHours;

            var operatingDays = (from d in this.OperatingDays
                                 group new { IsClosed = d.IsClosed, OpenTime = d.OpenTime, CloseTime = d.CloseTime } by d.DayOfWeek into hours
                                 select new
                                 {
                                     DayOfWeek = (DayOfWeek)hours.Key,
                                     IsClosed = hours.Any(h => h.IsClosed),
                                     Hours = (from h in hours
                                              orderby h.OpenTime
                                              select h).ToList()

                                 }).ToList();

            foreach (var od in operatingDays)
            {
                Common.BusinessDay bd = operatingHours.SingleOrDefault(
                    oh => oh.DayOfWeek == od.DayOfWeek);

                bd.IsClosed = od.IsClosed;
                bd.Hours1 = new Common.BusinessHours(od.Hours[0].OpenTime, od.Hours[0].CloseTime);

                if (od.Hours.Count > 1)
                    bd.Hours2 = new Common.BusinessHours(od.Hours[1].OpenTime, od.Hours[1].CloseTime);
            }

            return operatingHours;
        }



        public virtual ContactInfo ContactInfo { get; set; }
        public virtual ICollection<CommunityAmenity> CommunityAmenities { get; set; }
        public virtual ICollection<OperatingDay> OperatingDays { get; set; }
        public virtual ICollection<FeaturedCommunity> FeaturedCommunities { get; set; }
        public virtual ICollection<CommunityPhoto> CommunityPhotos { get; set; }
        public virtual Property Property { get; set; }
        public virtual ICollection<Building> Buildings { get; set; }
        public virtual User User { get; set; }
    }
}
